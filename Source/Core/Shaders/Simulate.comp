#version 450 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(R32F, binding = 1) uniform image3D o_Texture;
layout(R32F, binding = 2) uniform image3D i_Alpha;
layout(R32F, binding = 3) uniform image3D i_SaturationMap;

uniform float u_Dt;
uniform float u_DeltaTime;
uniform float u_Ratio;
uniform float u_Dim;
uniform int u_Frame;


uniform int u_VoxelRange;
uniform int u_VoxelVolSize;
uniform int u_SimulationFrames;
uniform bool u_SaturateTemp;

uniform sampler3D i_Prev;

vec3 TransformToVoxelSpace(vec3 WorldPosition) {
	WorldPosition = WorldPosition - vec3(0.,5.,0.);
	float Size = float(u_VoxelRange);
	float HalfExtent = Size / 2.0f;
	vec3 ScaledPos = WorldPosition / HalfExtent;
	vec3 Voxel = ScaledPos;
	Voxel = Voxel * 0.5f + 0.5f;
	return (Voxel);
}

layout (std430, binding = 4) buffer SensorBuffer {
    float SensorData[64];
};

layout (std430, binding = 5) buffer SensorBufferPositions {
    vec4 SensorPositions[64];
};
		
void main() { 

	ivec3 Texel = ivec3(gl_GlobalInvocationID.xyz);
	
	if (Texel == ivec3(4)) {
		for (int i = 0 ; i < 64 ; i++) {
			SensorData[i] = texture(i_Prev, TransformToVoxelSpace(vec3(-2.,8.,-13.))).x;
		}
	}
	
	float Current =	u_SimulationFrames <= 1 ? imageLoad(o_Texture, Texel).x : texelFetch(i_Prev, Texel, 0).x;

	if (u_SimulationFrames <= 1) {
		imageStore(o_Texture, ivec3(gl_GlobalInvocationID.xyz), vec4(Current));
		return;
	}

	// Blur previous buffer 

	float AlphaSampled = imageLoad(i_Alpha, Texel).x;

	float Laplacian = 0.0f;

	bool Mode = false;



	if (Mode) {

		int Kernel = 1; 
		float Sigma = 0.0; 

		for (int x = -Kernel; x <= Kernel; x++) {
			for (int y = -Kernel; y <= Kernel; y++) {
				for (int z = -Kernel; z <= Kernel; z++) {
					ivec3 Neighbourhood = ivec3(x, y, z);
					ivec3 NeighbourTexel = Texel + Neighbourhood;

					if (Neighbourhood == ivec3(0)) {
						continue;
					}

					float d = length(vec3(NeighbourTexel));
					float weight = 1.0 / (d * d);
					Sigma += weight;

					float neighborTemp = texelFetch(i_Prev, NeighbourTexel, 0).x;
					Laplacian += weight * (neighborTemp - Current);
				}
			}
		}

		Laplacian /= Sigma;
		Laplacian /= u_Ratio * u_Ratio;

	} else {
		ivec3 Offsets[6] = ivec3[](ivec3(1, 0, 0), ivec3(-1, 0, 0), ivec3(0, 1, 0),
								ivec3(0, -1, 0), ivec3(0, 0, 1), ivec3(0, 0, -1));


		for (int i = 0; i < 6; i++) {
			ivec3 Neighbour = Texel + Offsets[i];
			vec3 Scaled = vec3(Neighbour) / u_Dim;
			Laplacian += texelFetch(i_Prev, Neighbour, 0).x - Current;
		}

		Laplacian /= u_Ratio * u_Ratio;
	}
	//float Result = Current + (Sum - Current*6.) * 0.1f ;

	float Alpha = 0.002f;
	float Result = Current + Laplacian * (4. * AlphaSampled * 8.41e-5f / (u_Ratio*u_Ratio)) * u_DeltaTime;

	// Boundary Condition
	bool Boundary = (Texel.x == 0 || Texel.x == int(u_Dim) - 1 ||
                       Texel.y == 0 || Texel.y == int(u_Dim) - 1 ||
                       Texel.z == 0 || Texel.z == int(u_Dim) - 1);

	// Simple boundary condition 
    if (false) 
	{
        Result = 0.;
	}

	// Saturation Condition 
	bool DoSaturation = false;

	if(u_SaturateTemp)
	{
		float Sampled = imageLoad(i_SaturationMap, Texel).x;
		Result = max(Result, Sampled);
	}

	if (!isnan(Result) && !isinf(Result)) {
		imageStore(o_Texture, ivec3(gl_GlobalInvocationID.xyz), vec4(Result));
	}
}
